{"remainingRequest":"/Users/frakowski/Desktop/vsf-2/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/frakowski/Desktop/vsf-2/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/frakowski/Desktop/vsf-2/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/frakowski/Desktop/vsf-2/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/frakowski/Desktop/vsf-2/docs/README.md?vue&type=template&id=c6f5370e&","dependencies":[{"path":"/Users/frakowski/Desktop/vsf-2/docs/README.md","mtime":1570710559689},{"path":"/Users/frakowski/Desktop/vsf-2/node_modules/cache-loader/dist/cjs.js","mtime":1570710295225},{"path":"/Users/frakowski/Desktop/vsf-2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1565606814972},{"path":"/Users/frakowski/Desktop/vsf-2/node_modules/cache-loader/dist/cjs.js","mtime":1570710295225},{"path":"/Users/frakowski/Desktop/vsf-2/node_modules/vue-loader/lib/index.js","mtime":1565606814972},{"path":"/Users/frakowski/Desktop/vsf-2/node_modules/@vuepress/markdown-loader/index.js","mtime":1570710295289}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}